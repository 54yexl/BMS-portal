/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "E:\\智能终端\\web-ui\\BMS-portal/dist/1.0.0/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Created by yexl@txtws.com on 2018/03/12.
	 */
	//菜单插件
	__webpack_require__(/*! metismenu */ 1);
	//全局变量leftmenu和rightmenu
	window.leftmenu = window.leftmenu || {};
	window.rightmenu = window.rightmenu || {};
	//初始化左侧菜单
	leftmenu.initMenu = __webpack_require__(/*! ./left_menu */ 3);
	//初始化右侧菜单
	rightmenu.initMenu = __webpack_require__(/*! ./right_menu */ 4);
	
	var $iframeWindowContainer = $('body').find('.right-container');
	//点击左侧菜单
	$('body').on('click', '.menu-item', function () {
	    openIframe($(this).attr('href'));
	    return false;
	});
	
	//点击右侧菜单
	$('body').on('click', '.right-menu>ul>li>a', function () {
	    var $item = $(this);
	    $('.right-menu>ul>li>a').removeClass('active');
	    $item.addClass('active');
	    setTimeout(function () {
	        whetherScrollTabWidth($item.parent('li').index());
	    });
	    return false;
	});
	
	//点击左滑
	$('body').on('click', '.tabs-scroller-left', function () {
	    var left = 'left';
	    whetherScrollTabWidth(left);
	});
	//点击右滑
	$('body').on('click', '.tabs-scroller-right', function () {
	    var right = 'right';
	    whetherScrollTabWidth(right);
	});
	
	//是否更改右侧标签滚动
	function whetherScrollTabWidth(direction) {
	    var $iframeTabContainer = $('body').find('.right-menu>ul');
	    var $width = $iframeTabContainer.parent('.right-menu').width() - 70;
	    var $children = $iframeTabContainer.children().length;
	    // var $marginLeft=parseInt($iframeTabContainer.css('marginLeft').substr(0,$iframeTabContainer.css('marginLeft').indexOf('px')));//marginleft距离
	    var $marginLeft = parseInt($iframeTabContainer.css('marginLeft').replace(/\s+|px/gi, "")); //marginleft距离
	    if ($width > $children * 110) {} else {
	        if (direction == 'right') {
	            var ulLength = parseInt(-$children * 110);
	            var ulReLength = parseInt(-$children * 110 + 330);
	            if (ulReLength >= $marginLeft && $marginLeft >= ulLength) {
	                $iframeTabContainer.animate({
	                    'margin-left': -($children - 3) * 110
	                });
	            } else if ($marginLeft <= 0 && $marginLeft > ulReLength) {
	                $iframeTabContainer.animate({
	                    'margin-left': $marginLeft - 330
	                });
	            }
	        } else if (direction == 'left') {
	            if ($marginLeft > -330 && $marginLeft < 0) {
	                $iframeTabContainer.animate({
	                    'margin-left': 0
	                });
	            } else if ($marginLeft < 0) {
	                $iframeTabContainer.animate({
	                    'margin-left': $marginLeft + 330
	                });
	            }
	        } else {
	            var $toLeftDistance = direction * 110;
	            if ($toLeftDistance + 110 >= $width) {
	                $iframeTabContainer.animate({
	                    'margin-left': -$toLeftDistance + 110
	                });
	            } else if ($toLeftDistance < $width && $marginLeft < 0) {
	                $iframeTabContainer.animate({
	                    'margin-left': 0
	                });
	            }
	        }
	    }
	}
	
	//异步默认打开第一个iframe与打开iframe
	window.openIframe = function (url) {
	    var index = 'f' + new Date().getTime();
	    $iframeWindowContainer.children().remove();
	    if (url) {
	        var n = '<iframe class="active" name="iframe' + index + '" width="100%" height="100%" src="' + url + '" frameborder="0" data-id="' + index + '" seamless></iframe>';
	        $iframeWindowContainer.append(n);
	        return false;
	    } else if (!url) {
	        var n = '<iframe class="active" name="iframe' + index + '" width="100%" height="100%" src="' + '404.html' + '" frameborder="0" data-id="' + index + '" seamless></iframe>';
	        $iframeWindowContainer.append(n);
	        return false;
	    }
	};
	
	__webpack_require__(/*! ./css/index.less */ 5);

/***/ }),
/* 1 */
/*!********************************************************!*\
  !*** ./~/_metismenu@2.7.4@metismenu/dist/metisMenu.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * metismenu - v2.7.4
	 * A jQuery menu plugin
	 * https://github.com/onokumus/metismenu#readme
	 *
	 * Made by Osman Nuri Okumus <onokumus@gmail.com> (https://github.com/onokumus)
	 * Under MIT License
	 */
	
	(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ 2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(require('jquery'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(global.jQuery);
	    global.metisMenu = mod.exports;
	  }
	})(this, function (_jquery) {
	  'use strict';
	
	  var _jquery2 = _interopRequireDefault(_jquery);
	
	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }
	
	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  };
	
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }
	
	  var _createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	
	  var Util = function ($) {
	    var transition = false;
	
	    function getSpecialTransitionEndEvent() {
	      return {
	        bindType: transition.end,
	        delegateType: transition.end,
	        handle: function handle(event) {
	          if ($(event.target).is(this)) {
	            return event.handleObj.handler.apply(this, arguments);
	          }
	          return undefined;
	        }
	      };
	    }
	
	    function transitionEndTest() {
	      if (typeof window !== 'undefined' && window.QUnit) {
	        return false;
	      }
	
	      return {
	        end: 'transitionend'
	      };
	    }
	
	    function transitionEndEmulator(duration) {
	      var _this2 = this;
	
	      var called = false;
	
	      $(this).one(Util.TRANSITION_END, function () {
	        called = true;
	      });
	
	      setTimeout(function () {
	        if (!called) {
	          Util.triggerTransitionEnd(_this2);
	        }
	      }, duration);
	
	      return this;
	    }
	
	    function setTransitionEndSupport() {
	      transition = transitionEndTest();
	      $.fn.mmEmulateTransitionEnd = transitionEndEmulator;
	
	      if (Util.supportsTransitionEnd()) {
	        $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
	      }
	    }
	
	    var Util = {
	      TRANSITION_END: 'mmTransitionEnd',
	
	      triggerTransitionEnd: function triggerTransitionEnd(element) {
	        $(element).trigger(transition.end);
	      },
	      supportsTransitionEnd: function supportsTransitionEnd() {
	        return Boolean(transition);
	      }
	    };
	
	    setTransitionEndSupport();
	
	    return Util;
	  }(_jquery2.default);
	
	  var MetisMenu = function ($) {
	
	    var NAME = 'metisMenu';
	    var DATA_KEY = 'metisMenu';
	    var EVENT_KEY = '.' + DATA_KEY;
	    var DATA_API_KEY = '.data-api';
	    var JQUERY_NO_CONFLICT = $.fn[NAME];
	    var TRANSITION_DURATION = 350;
	
	    var Default = {
	      toggle: true,
	      preventDefault: true,
	      activeClass: 'active',
	      collapseClass: 'collapse',
	      collapseInClass: 'in',
	      collapsingClass: 'collapsing',
	      triggerElement: 'a',
	      parentTrigger: 'li',
	      subMenu: 'ul'
	    };
	
	    var Event = {
	      SHOW: 'show' + EVENT_KEY,
	      SHOWN: 'shown' + EVENT_KEY,
	      HIDE: 'hide' + EVENT_KEY,
	      HIDDEN: 'hidden' + EVENT_KEY,
	      CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
	    };
	
	    var MetisMenu = function () {
	      function MetisMenu(element, config) {
	        _classCallCheck(this, MetisMenu);
	
	        this._element = element;
	        this._config = this._getConfig(config);
	        this._transitioning = null;
	
	        this.init();
	      }
	
	      _createClass(MetisMenu, [{
	        key: 'init',
	        value: function init() {
	          var self = this;
	          $(this._element).find(this._config.parentTrigger + '.' + this._config.activeClass).has(this._config.subMenu).children(this._config.subMenu).attr('aria-expanded', true).addClass(this._config.collapseClass + ' ' + this._config.collapseInClass);
	
	          $(this._element).find(this._config.parentTrigger).not('.' + this._config.activeClass).has(this._config.subMenu).children(this._config.subMenu).attr('aria-expanded', false).addClass(this._config.collapseClass);
	
	          $(this._element).find(this._config.parentTrigger).has(this._config.subMenu).children(this._config.triggerElement).on(Event.CLICK_DATA_API, function (e) {
	            var _this = $(this);
	            var _parent = _this.parent(self._config.parentTrigger);
	            var _siblings = _parent.siblings(self._config.parentTrigger).children(self._config.triggerElement);
	            var _list = _parent.children(self._config.subMenu);
	            if (self._config.preventDefault) {
	              e.preventDefault();
	            }
	            if (_this.attr('aria-disabled') === 'true') {
	              return;
	            }
	            if (_parent.hasClass(self._config.activeClass)) {
	              _this.attr('aria-expanded', false);
	              self._hide(_list);
	            } else {
	              self._show(_list);
	              _this.attr('aria-expanded', true);
	              if (self._config.toggle) {
	                _siblings.attr('aria-expanded', false);
	              }
	            }
	
	            if (self._config.onTransitionStart) {
	              self._config.onTransitionStart(e);
	            }
	          });
	        }
	      }, {
	        key: '_show',
	        value: function _show(element) {
	          if (this._transitioning || $(element).hasClass(this._config.collapsingClass)) {
	            return;
	          }
	          var _this = this;
	          var _el = $(element);
	
	          var startEvent = $.Event(Event.SHOW);
	          _el.trigger(startEvent);
	
	          if (startEvent.isDefaultPrevented()) {
	            return;
	          }
	
	          _el.parent(this._config.parentTrigger).addClass(this._config.activeClass);
	
	          if (this._config.toggle) {
	            this._hide(_el.parent(this._config.parentTrigger).siblings().children(this._config.subMenu + '.' + this._config.collapseInClass).attr('aria-expanded', false));
	          }
	
	          _el.removeClass(this._config.collapseClass).addClass(this._config.collapsingClass).height(0);
	
	          this.setTransitioning(true);
	
	          var complete = function complete() {
	            // check if disposed
	            if (!_this._config || !_this._element) {
	              return;
	            }
	            _el.removeClass(_this._config.collapsingClass).addClass(_this._config.collapseClass + ' ' + _this._config.collapseInClass).height('').attr('aria-expanded', true);
	
	            _this.setTransitioning(false);
	
	            _el.trigger(Event.SHOWN);
	          };
	
	          if (!Util.supportsTransitionEnd()) {
	            complete();
	            return;
	          }
	
	          _el.height(_el[0].scrollHeight).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);
	        }
	      }, {
	        key: '_hide',
	        value: function _hide(element) {
	
	          if (this._transitioning || !$(element).hasClass(this._config.collapseInClass)) {
	            return;
	          }
	          var _this = this;
	          var _el = $(element);
	
	          var startEvent = $.Event(Event.HIDE);
	          _el.trigger(startEvent);
	
	          if (startEvent.isDefaultPrevented()) {
	            return;
	          }
	
	          _el.parent(this._config.parentTrigger).removeClass(this._config.activeClass);
	          _el.height(_el.height())[0].offsetHeight;
	
	          _el.addClass(this._config.collapsingClass).removeClass(this._config.collapseClass).removeClass(this._config.collapseInClass);
	
	          this.setTransitioning(true);
	
	          var complete = function complete() {
	            // check if disposed
	            if (!_this._config || !_this._element) {
	              return;
	            }
	            if (_this._transitioning && _this._config.onTransitionEnd) {
	              _this._config.onTransitionEnd();
	            }
	
	            _this.setTransitioning(false);
	            _el.trigger(Event.HIDDEN);
	
	            _el.removeClass(_this._config.collapsingClass).addClass(_this._config.collapseClass).attr('aria-expanded', false);
	          };
	
	          if (!Util.supportsTransitionEnd()) {
	            complete();
	            return;
	          }
	
	          _el.height() == 0 || _el.css('display') == 'none' ? complete() : _el.height(0).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);
	        }
	      }, {
	        key: 'setTransitioning',
	        value: function setTransitioning(isTransitioning) {
	          this._transitioning = isTransitioning;
	        }
	      }, {
	        key: 'dispose',
	        value: function dispose() {
	          $.removeData(this._element, DATA_KEY);
	
	          $(this._element).find(this._config.parentTrigger).has(this._config.subMenu).children(this._config.triggerElement).off('click');
	
	          this._transitioning = null;
	          this._config = null;
	          this._element = null;
	        }
	      }, {
	        key: '_getConfig',
	        value: function _getConfig(config) {
	          config = $.extend({}, Default, config);
	          return config;
	        }
	      }], [{
	        key: '_jQueryInterface',
	        value: function _jQueryInterface(config) {
	          return this.each(function () {
	            var $this = $(this);
	            var data = $this.data(DATA_KEY);
	            var _config = $.extend({}, Default, $this.data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config);
	
	            if (!data && /dispose/.test(config)) {
	              this.dispose();
	            }
	
	            if (!data) {
	              data = new MetisMenu(this, _config);
	              $this.data(DATA_KEY, data);
	            }
	
	            if (typeof config === 'string') {
	              if (data[config] === undefined) {
	                throw new Error('No method named "' + config + '"');
	              }
	              data[config]();
	            }
	          });
	        }
	      }]);
	
	      return MetisMenu;
	    }();
	
	    /**
	     * ------------------------------------------------------------------------
	     * jQuery
	     * ------------------------------------------------------------------------
	     */
	
	    $.fn[NAME] = MetisMenu._jQueryInterface;
	    $.fn[NAME].Constructor = MetisMenu;
	    $.fn[NAME].noConflict = function () {
	      $.fn[NAME] = JQUERY_NO_CONFLICT;
	      return MetisMenu._jQueryInterface;
	    };
	    return MetisMenu;
	  }(_jquery2.default);
	});


/***/ }),
/* 2 */
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ (function(module, exports) {

	module.exports = jQuery;

/***/ }),
/* 3 */
/*!**************************!*\
  !*** ./src/left_menu.js ***!
  \**************************/
/***/ (function(module, exports) {

	/**
	 * Created by yexl@txtws.com on 2018/03/12.
	 */
	module.exports = function (menu) {
	    //递归渲染
	    function renderMenu(htmlArr, menu) {
	        for (var i in menu) {
	            if (menu[i]['active'] && menu[i]['items']) {
	                htmlArr.push("<li class='active'>");
	            } else {
	                htmlArr.push('<li>');
	            }
	            if (!menu[i]['items']) {
	                if (menu[i]['sep']) {
	                    htmlArr.push('<span class= "sep" >' + menu[i]['sep'] + '</span>');
	                } else {
	                    htmlArr.push('<a class = "menu-item" href="' + menu[i]['url'] + '">');
	                    if (menu[i]['icon'] && menu[i]['icon'].match(/\.\w{2}/)) {
	                        htmlArr.push('<i class="nav-icon"><img src="' + menu[i]['icon'] + '" /></i>');
	                    } else {
	                        htmlArr.push('<i class="nav-icon ' + (menu[i]['icon'] ? menu[i]['icon'] : 'fa fa-link') + '"></i>');
	                    }
	                    htmlArr.push('<span class="nav-label">' + menu[i]['title'] + '</span>');
	                    htmlArr.push('</a>');
	                }
	            } else {
	                htmlArr.push('<a href="javascript:;">');
	                if (menu[i]['icon'] && menu[i]['icon'].match(/\.\w{2}/)) {
	                    htmlArr.push('<i class="nav-icon"><img src="' + menu[i]['icon'] + '" /></i>');
	                } else {
	                    htmlArr.push('<i class="nav-icon ' + (menu[i]['icon'] ? menu[i]['icon'] : 'fa fa-th-large') + '"></i>');
	                }
	                htmlArr.push('<span class="nav-label">' + menu[i]['title'] + '</span>');
	                htmlArr.push('<span class="nav-arrow fa"></span>');
	                htmlArr.push('</a>');
	                htmlArr.push('<ul>');
	                renderMenu(htmlArr, menu[i]['items']);
	                htmlArr.push('</ul>');
	            }
	            htmlArr.push('</li>');
	        }
	    }
	
	    //渲染
	    var htmlArr = [];
	    renderMenu(htmlArr, menu);
	    htmlArr.unshift('<ul class="left-sidebar-nav">');
	    htmlArr.push('</ul>');
	    $('.left-menu').html(htmlArr.join(""));
	
	    //初始化菜单插件
	    $(".left-sidebar-nav").metisMenu({
	        preventDefault: false
	    });
	};

/***/ }),
/* 4 */
/*!***************************!*\
  !*** ./src/right_menu.js ***!
  \***************************/
/***/ (function(module, exports) {

	/**
	 * Created by yexl@txtws.com on 2018/03/12.
	 */
	module.exports = function (menu) {
	    //递归渲染
	    function renderMenu(htmlArr, menu) {
	        for (var i in menu) {
	            var $list = "<li><a href='";
	            if (i == 0) {
	                $list = "<li><a class='active' href='";
	            }
	            htmlArr.push($list);
	            htmlArr.push(menu[i].url + "'");
	            htmlArr.push("id='" + menu[i].id + "'");
	            htmlArr.push(">");
	            htmlArr.push(menu[i].title);
	            htmlArr.push('</a>');
	            htmlArr.push('</li>');
	        }
	    };
	    //渲染
	    var htmlArr = [];
	    renderMenu(htmlArr, menu);
	    $('.right-menu ul').append(htmlArr.join(""));
	};

/***/ }),
/* 5 */
/*!****************************!*\
  !*** ./src/css/index.less ***!
  \****************************/
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=index.min.js.map